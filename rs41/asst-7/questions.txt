1. Write a python program to:
    a. Open a text file in write mode and write some data into it.
    b. Read and print the contents using the read() method.
    c. Close a file properly and print a message once closed.

2. Open a file in diffenent modes (r, w, a, r+) and print file attribute like: 
    a. name, mode, closed, readable(), writable().

3. Write a program to:
    a. Create a file named student txt.
    b. Add student name and marks.
    c. Append additional student records without overwriting existing content.

4. Demonstrate: 
    a. Use of tell() to get the current file pointer.
    b. Use of seek() to move the pointer and read data from a specific position.



'''
4. Demonstrate:5
    a. Use of tell() to get the current file pointer.
    b. Use of seek() to move the pointer and read data from a specific position.
'''


def demonstrate_tell_and_seek():
    """
    Demonstrates the use of tell() and seek() in a single function.
    """
    file_name = "example.txt"
    sample_text = "Hello, this is a sample text for demonstration."

    # Step 1: Create and write to a new file
    with open(file_name, "w") as file:
        file.write(sample_text)
    print(f"File '{file_name}' created with content: '{sample_text}'")
    print("-" * 30)

    # Step 2: Open the file for reading and demonstrate tell() and seek()
    with open(file_name, "r") as file:
        # a. Use of tell()
        initial_position = file.tell()
        print(f"Initial file pointer position: {initial_position} bytes")

        # Read the first 7 characters
        content_read = file.read(7)
        print(f"Read 7 characters: '{content_read}'")

        # Get the new position using tell()
        current_position = file.tell()
        print(f"Current file pointer position after reading: {current_position} bytes")
        print("-" * 30)

        # b. Use of seek()
        # Move the pointer to a specific position (e.g., 10th byte)
        file.seek(10)
        print(f"Moved file pointer to byte 10.")

        # Read from the new position
        content_after_seek = file.read(5)
        print(f"Read 5 characters from the new position: '{content_after_seek}'")

        # Move the pointer back to the beginning (0th byte)
        file.seek(0)
        print("Moved file pointer back to the beginning.")

        # Read the entire file from the start
        full_content = file.read()
        print(f"Read the entire content from the beginning: '{full_content}'")
        print("-" * 30)

    print("Demonstration complete.")

demonstrate_tell_and_seek()


3. Write a program to:
    a. Create a file named student.txt
    b. Add student name and marks.
    c. Append additional student records without overwrite existing content.
'''
'''
# For check purpose
with open('student.txt', 'r') as file:
    content = file.read()
    print(content)
'''
    
def student_db():
    """
    Manages student records by creating a file, adding initial data,
    and allowing the user to append more records.
    """
    file_name = "student.txt"

    # a. Create and write initial records
    with open(file_name, 'w') as file:
        file.write("Student Name,Marks\n")  # Header
        # b. Add some initial student names and marks
        file.write("Manish,40\n")
        file.write("Avik,38\n")
        print(f"File '{file_name}' created with initial student data.")

    # c. Append additional student records based on user input
    while True:
        try:
            # Get user input for student details
            student_name = input("Enter student name (or 'q' to quit): ")
            if student_name.lower() == 'q':
                break

            marks = int(input(f"Enter marks for {student_name}: "))

            # Append the new record to the file
            with open(file_name, 'a') as file:
                file.write(f"{student_name},{marks}\n")
            print(f"Record for {student_name} added successfully.")

        except ValueError:
            print("Invalid input. Please enter a valid number for marks.")

    print("Student record management complete.")

# Run the program
student_db()